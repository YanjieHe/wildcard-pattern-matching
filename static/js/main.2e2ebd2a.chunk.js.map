{"version":3,"sources":["serviceWorker.js","WildcardPatternMatching.js","index.js"],"names":["Boolean","window","location","hostname","match","WildcardPatternMatching","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","pattern","result","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","name","value","matches","preventDefault","react_default","a","createElement","onSubmit","type","onChange","style","color","nrows","ncols","Array","i","length","lookup","createArray","j","charAt","React","Component","ReactDOM","render","src_WildcardPatternMatching","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e2ebd2a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nclass WildcardPatternMatching extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n            pattern: '',\n            result: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSubmit(event) {\n        if (WildcardPatternMatching.matches(this.state.text, this.state.pattern)) {\n            this.setState({result: \"match\"})\n        } else {\n            this.setState({result: \"no match\"})\n        }\n        event.preventDefault();\n    }\n\n    static createArray(nrows, ncols) {\n        var result = new Array(nrows);\n        for (var i = 0; i < nrows; i++) {\n            result[i] = new Array(ncols)\n        }\n        return result\n    }\n\n    static matches(text, pattern) {\n        if (pattern.length === 0) {\n            return text.length === 0;\n        } else {\n            let lookup = WildcardPatternMatching.createArray(text.length + 1, pattern.length + 1);\n            for (let i = 0; i < text.length + 1; i++) {\n                for (let j = 0; j < pattern.length + 1; j++) {\n                    lookup[i][j] = false;\n                }\n            }\n            lookup[0][0] = true;\n            for (let j = 1; j <= pattern.length; j++) {\n                if (pattern.charAt(j - 1) === '*') {\n                    lookup[0][j] = lookup[0][j - 1];\n                }\n            }\n            for (let i = 1; i <= text.length; i++) {\n                for (let j = 1; j <= pattern.length; j++) {\n                    if (pattern.charAt(j - 1) === '*') {\n                        lookup[i][j] = lookup[i][j - 1] || lookup[i - 1][j];\n                    } else if (pattern.charAt(j - 1) === '?' || text.charAt(i - 1) === pattern.charAt(j - 1)) {\n                        lookup[i][j] = lookup[i - 1][j - 1];\n                    } else {\n                        lookup[i][j] = false;\n                    }\n                }\n            }\n            return lookup[text.length][pattern.length];\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <fieldset>\n                    <legend>Wildcard Pattern Matching</legend>\n                    <table>\n                        <tbody>\n                        <tr>\n                            <td>\n                                Text:\n                            </td>\n                            <td><input type=\"text\" name=\"text\" value={this.state.text} onChange={this.handleChange}/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                Pattern:\n                            </td>\n                            <td><input type=\"text\" name=\"pattern\" value={this.state.pattern}\n                                       onChange={this.handleChange}/>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td><input type=\"submit\" value=\"TEST MATCH\"/></td>\n                            <td>Result: <span style={{\"color\": \"red\"}}>{this.state.result}</span></td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default WildcardPatternMatching","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport WildcardPatternMatching from \"./WildcardPatternMatching\";\n\nReactDOM.render(<WildcardPatternMatching />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}